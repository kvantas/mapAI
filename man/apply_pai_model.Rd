% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/apply_pai_model.R
\name{apply_pai_model}
\alias{apply_pai_model}
\title{Apply a Trained PAI Model to Correct a Vector Map}
\usage{
apply_pai_model(pai_model, map)
}
\arguments{
\item{pai_model}{An object of class \code{pai_model} returned by
\code{train_pai_model()}.}

\item{map}{An \code{sf} object representing the vector map to be corrected.}
}
\value{
A new \code{sf} object with the corrected geometry.
}
\description{
Applies a trained \code{pai_model} object to an \code{sf} vector map,
correcting the position of all its vertices based on the learned
transformation.
}
\details{
This function is the final step in the PAI workflow, applying the learned
spatial correction to a target map. It uses a robust feature-by-feature
iteration that correctly handles all standard simple and multi-part geometry
types (\code{POINT}, \code{LINESTRING}, \code{POLYGON}, etc.).
}
\examples{
# This example demonstrates a full workflow with POINT geometry.

# --- 1. Load Data and Train Model ---
data(gcps) # gcps is an sf object with POINT geometry
gam_model <- train_pai_model(gcps, pai_method = "gam")

# --- 2. Apply the Model to Correct the Points ---
corrected_points <- apply_pai_model(gam_model, gcps)

# --- 3. Inspect and Visualize ---
# The coordinates of the corrected points should be different.
head(sf::st_coordinates(gcps))
head(sf::st_coordinates(corrected_points))

# Visually confirm the points have moved
plot(sf::st_geometry(gcps), col = 'grey', pch = 4, cex=0.5,
     main = "Original (Grey) vs. Corrected (Red) Points")
plot(sf::st_geometry(corrected_points), col = 'red', pch = 16, cex=0.5, add = TRUE)

}
