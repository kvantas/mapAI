% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/apply_pai_model.R
\name{apply_pai_model}
\alias{apply_pai_model}
\title{Apply a Trained PAI Model to Correct a Vector Map}
\usage{
apply_pai_model(pai_model, map)
}
\arguments{
\item{pai_model}{An object of class \code{pai_model} returned by \code{train_pai_model()}.}

\item{map}{An \code{sf} object representing the vector map to be corrected,
typically read by \code{read_map()}.}
}
\value{
A new \code{sf} object with the corrected geometry. Original attributes are
preserved, and an \code{area_new} column is added for polygon features.
}
\description{
Applies a trained \code{pai_model} object to an \code{sf} vector map,
correcting the position of all its vertices based on the learned transformation.
}
\details{
This function is the final step in the PAI workflow, applying the learned
spatial correction to a target map. It is designed to be robust and transparent:
\itemize{
\item \strong{Robust Geometry Handling:} It uses a recursive method to traverse
arbitrarily complex geometries (e.g., \code{MULTIPOLYGON} with holes), ensuring
every vertex is corrected and the feature is rebuilt accurately.
\item \strong{Model-Specific Prediction:} It correctly handles the different
output structures of the supported model types (\code{gam}, \code{lm}, and \code{rf}).
\item \strong{Area Calculation:} If the input \code{map} contains \code{POLYGON} or
\code{MULTIPOLYGON} geometries, the function automatically calculates the area of
the newly corrected features and adds it to a column named \code{area_new},
allowing for analysis of shape and size changes.
}
}
\examples{
\dontrun{
# This example demonstrates a full workflow:
# 1. Load the package's built-in real-world data
# 2. Train a Random Forest model
# 3. Apply the model to correct the parcel map
# 4. Inspect and visualize the results

# --- 1. Load Data ---
library(sf)
data(parcels) # Load the polygon map to be corrected
data(gcps)    # Load the corresponding ground control points

# --- 2. Train a PAI Model ---
# We'll use Random Forest for this example
pai_model_rf <- train_pai_model(gcps, method = "rf")

# --- 3. Apply the Model to Correct the Map ---
corrected_parcels <- apply_pai_model(pai_model = pai_model_rf, map = parcels)

# --- 4. Inspect and Visualize ---

# Print the head of the corrected data frame.
# Note the 'area_old' and 'area_new' columns, showing how the area changed.
print(head(corrected_parcels))

# Visualize the original vs. corrected map
# Plot the original parcels with a dashed grey line
plot(st_geometry(parcels), border = 'grey50', lty = 'dashed',
     main = "Original (Grey) vs. Corrected (Red) Parcels")

# Add the corrected parcels with a solid red line on top
plot(st_geometry(corrected_parcels), border = 'red', add = TRUE)
}
}
